from aiogram import F, Router, types
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.keyboards import *
from src.data_base import Database
from src.utils import is_super_admin, password_for_admin, get_current_date

router = Router()


class FSMSuperAdminPanel(StatesGroup):
    add_or_change_calls = State()


@router.message(F.text == "password")
async def password(message: types.Message) -> None:
    if not await is_super_admin(message):
        return

    await message.answer(f"PASSWORD : {await password_for_admin()}")


@router.message(F.text == "db")
async def send_file_db(message: types.Message) -> None:
    if not await is_super_admin(message):
        return

    file_path = types.FSInputFile("data/database.db")
    await message.bot.send_document(message.from_user.id, file_path)


@router.callback_query(F.data == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def super_admin_back(query: types.CallbackQuery):
    if not await is_super_admin(query):
        return

    text = (
        f"–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º üéõ\n"
        f"‚Ä¢ –†–æ–∑–∫–ª–∞–¥ - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É\n"
        f"‚Ä¢ –ì—Ä—É–ø–∏ - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—è –≥—Ä—É–ø\n"
    )

    await query.message.edit_text(text=text, reply_markup=super_admin_kb())


@router.callback_query(F.data == "–†–æ–∑–∫–ª–∞–¥ üìù")
async def choise_in_panel0(query: types.CallbackQuery):
    if not await is_super_admin(query):
        return

    text = (
        f"–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –†–æ–∑–∫–ª–∞–¥–æ–º üéõ\n"
        f"‚Ä¢ –î–æ–¥–∞—Ç–∏/–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≥—Ä—É–ø—ñ üóì\n"
        f"‚Ä¢ –î–æ–¥–∞—Ç–∏/–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ üîî\n"
        f"‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –≥—Ä—É–ø—ñ üóì\n"
        f"‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ üîî\n"
    )

    await query.message.edit_text(text=text, reply_markup=super_admin_schedule())


@router.callback_query(F.data == "–ì—Ä—É–ø–∏ üë•")
async def choise_in_panel1(query: types.CallbackQuery):
    if not await is_super_admin(query):
        return

    text = f"–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ì—Ä—É–ø–∞–º–∏ üéõ\n" f"‚Ä¢ –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É üë•\n" f"‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É üë•\n"

    await query.message.edit_text(text=text, reply_markup=super_admin_group())


@router.callback_query(F.data == "–Ü–Ω—à–µ üìï")
async def choise_in_panel1(query: types.CallbackQuery):
    if not await is_super_admin(query):
        return

    text = (
        f"–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ü–Ω—à–∏–º üéõ\n"
        f"‚Ä¢ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ üñº - –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —É –±–∞–∑—É –¥–∞–Ω–Ω–∏—Ö –∑ —ó—ó —ñ–º'—è–º. (calls - —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤\n"
    )

    await query.message.edit_text(text=text, reply_markup=super_admin_group())


@router.callback_query(F.data == "–î–æ–¥–∞—Ç–∏/–ó–º—ñ–Ω–∏—Ç–∏ üîî")
async def add_or_change_calls1(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ üñº\n–ó —É–≤—ñ–º–∫–Ω—É—Ç–∏–º —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è–º", reply_markup=None)
    await state.set_state(FSMSuperAdminPanel.add_or_change_calls)
    await state.update_data(message=query.message)


@router.message(F.photo, FSMSuperAdminPanel.add_or_change_calls)
async def add_or_change_calls2(message: types.Message, state: FSMContext):
    db = await Database.setup()
    date = f"–ó–º—ñ–Ω–µ–Ω–Ω–æ: {await get_current_date()}"
    old_message: types.Message = (await state.get_data())["message"]

    await message.answer("–§–æ—Ç–æ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–º—ñ–Ω–µ–Ω–Ω–æ ‚úÖ", reply_markup=super_admin_schedule())
    await old_message.delete()
    await message.delete()
    await state.clear()

    if await db.photo_exists("calls"):
        await db.update_photo(name_photo="calls", photo=message.photo[0].file_id, date_photo=date)
        return

    await db.add_photo(name_photo="calls", photo=message.photo[0].file_id, date_photo=date)
