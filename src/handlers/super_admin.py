from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from src.config import SUPER_ADMIN
from src.handlers.reg import password_for_admin
from src.keyboards import *
from src.utils import get_current_date
from src.data_base import Database

router = Router()


class FSMSuperAdmin(StatesGroup):
    id_student_delete = State()
    # GROP MANAGMENT
    curse_group = State()
    curse_group_delete = State()
    curse_group_photo_delete = State()
    # SCHEDULE STUDENTS
    curse_group_rad = State()
    curse_group_rad_photo = State()
    # SCHEDULE CALLS
    id_photo = State()


async def is_super_admin(message: types.Message) -> bool:
    user_id = message.from_user.id
    if user_id in SUPER_ADMIN:
        return True
    else:
        return False


# ===========================–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø============================ss


# –ö–ª–∞–≤—ñ–∞—É—Ä–∞ –≤–ª–∞—Å–Ω–∏–∫–∞
@router.message(Command("sadmin"))
async def super_admin(message: types.Message) -> None:
    if not await is_super_admin(message):
        return

    await message.answer("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–ª–∞—Å–Ω–∏–∫–∞", reply_markup=super_admin_kb())


# –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ id
@router.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def super_admin_delete_user(message: types.Message, state: FSMContext) -> None:
    if not await is_super_admin(message):
        return

    await message.answer("–í–≤–µ–¥—ñ—Ç—å ID —Å—Ç—É–¥–µ–Ω—Ç–∞")
    await state.set_state(FSMSuperAdmin.id_student_delete)


@router.message(FSMSuperAdmin.id_student_delete)
async def super_admin_delete_user1(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    exits = await db.student_exists(message.text)
    if exits:
        await db.delete_student(message.text)
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω–æ")
        await state.clear()
    elif not exits:
        await message.answer("–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID")
        await state.clear()


@router.message(F.text == "password")
async def password(message: types.Message) -> None:
    if not await is_super_admin(message):
        return

    await message.answer(f"PASSWORD : {await password_for_admin()}")


@router.message(F.text == "db")
async def send_file_db(message: types.Message) -> None:
    if not await is_super_admin(message):
        return

    file_path = types.FSInputFile("data/database.db")
    await message.bot.send_document(message.from_user.id, file_path)


# ===========================–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤============================
@router.message(F.text == "–¥–∑–≤—ñ–Ω–∫—ñ–≤ ‚ùáÔ∏è")
async def add_calls(message: types.Message, state: FSMContext) -> None:
    if not await is_super_admin(message):
        return

    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ", reply_markup=ReplyKeyboardRemove())
    await state.set_state(FSMSuperAdmin.id_photo)


@router.message(F.photo, FSMSuperAdmin.id_photo)
async def add_calls1(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    translation = await get_current_date()

    if not await is_super_admin(message):
        return

    await db.add_photo("calls", message.photo[0].file_id, "–ó–º—ñ–Ω–µ–Ω–Ω–æ: " + translation)
    await message.answer("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=super_admin_kb())
    await state.clear()


# ===========================–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤============================
@router.message(F.text == "–¥–∑–≤—ñ–Ω–∫—ñ–≤ üóë")
async def delete_calls(message: types.Message) -> None:
    db = await Database.setup()
    check = await db.delete_photo("calls")

    if not await is_super_admin(message):
        return

    if not check:
        await message.answer("–†–æ–∑–∫–ª–∞–¥—É –¥–∑–≤—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î üî¥", reply_markup=super_admin_kb())
        return

    await message.answer("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ üóë", reply_markup=super_admin_kb())


# ===========================–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É============================
@router.message(F.text == "–≥—Ä—É–ø—É üóë")
async def delete_group(message: types.Message, state: FSMContext) -> None:
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group_delete)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É ‚¨áÔ∏è", reply_markup=await group_selection_student_kb())


@router.message(FSMSuperAdmin.curse_group_delete)
async def delete_group1(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=super_admin_kb())
        await state.clear()
        return

    fullname = message.text
    if not await db.student_group_exists(fullname):
        await message.answer("–ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ–º–∞—î", reply_markup=super_admin_kb())
        await state.clear()
        return

    if len(fullname) >= 3:
        await message.answer("‚ùå –õ—ñ–º—ñ—Ç 3 —Å–∏–º–≤–æ–ª–∏ ", reply_markup=super_admin_kb())
        await state.clear()
        return

    if not await db.student_in_group_exists(fullname):
        await db.delete_student_group(fullname)
        await message.answer("–ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=super_admin_kb())
        await state.clear()
        return

    await db.delete_student_group(fullname)
    await db.delete_student_for_group(fullname)
    await message.answer("–ì—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=super_admin_kb())
    await state.clear()


# ===========================–î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏============================
@router.message(F.text == "–≥—Ä—É–ø—É ‚ùáÔ∏è")
async def add_group(message: types.Message, state: FSMContext) -> None:
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É\n–ü—Ä–∏–∫–ª–∞–¥ : 2–¶", reply_markup=ReplyKeyboardRemove())


@router.message(FSMSuperAdmin.curse_group)
async def add_group1(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=super_admin_kb())
        await state.clear()
        return

    name = message.text
    if await db.student_group_exists(name):
        await message.answer("–ì—Ä—É–ø–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —î", reply_markup=super_admin_kb())
        await state.clear()
        return

    if len(name) >= 3:
        await message.answer("‚ùå –õ—ñ–º—ñ—Ç 3 —Å–∏–º–≤–æ–ª–∏", reply_markup=super_admin_kb())
        await state.clear()
        return

    await db.add_student_group(name)
    await message.answer("–ì—Ä—É–ø—É —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ", reply_markup=super_admin_kb())
    await state.clear()


# ===========================–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞–º============================
@router.message(F.text == "–≥—Ä—É–ø—ñ ‚ùáÔ∏è")
async def add_schedule_to_group(message: types.Message, state: FSMContext) -> None:
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group_rad_photo)
    await message.answer("–ö–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É", reply_markup=ReplyKeyboardRemove())


@router.message(F.photo, FSMSuperAdmin.curse_group_rad_photo)
async def add_schedule_to_group1(message: types.Message, state: FSMContext) -> None:
    if not await is_super_admin(message):
        return

    await state.update_data(curse_group_rad_photo=message.photo[0].file_id)
    await state.set_state(FSMSuperAdmin.curse_group_rad)
    await message.answer("–î–æ —è–∫–æ—ó –≥—Ä—É–ø–∏ –ø—Ä–∏–≤—è–∑–∞—Ç–∏", reply_markup=await group_selection_student_kb())


@router.message(FSMSuperAdmin.curse_group_rad)
async def add_schedule_to_group2(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    data = await state.get_data()
    translation = await get_current_date()

    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞", reply_markup=super_admin_kb())
        await state.clear()
        return

    if not await db.student_group_exists(message.text):
        await message.answer("–ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏ ‚ùå", reply_markup=super_admin_kb())
        await state.clear()
        return

    await db.student_group_photo_update(
        data["curse_group_rad_photo"], message.text, "–ó–º—ñ–Ω–µ–Ω–Ω–æ: " + translation
    )
    await message.answer("–†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=super_admin_kb())
    await state.clear()


@router.message(F.text == "–≥—Ä—É–ø—É üóëüñº")
async def delete_photo_group(message: types.Message, state: FSMContext) -> None:
    if not await is_super_admin(message):
        return

    await state.set_state(FSMSuperAdmin.curse_group_photo_delete)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É ‚¨áÔ∏è", reply_markup=await group_selection_student_kb())


@router.message(FSMSuperAdmin.curse_group_photo_delete)
async def delete_photo_group1(message: types.Message, state: FSMContext) -> None:
    db = await Database.setup()
    if not await is_super_admin(message):
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=super_admin_kb())
        await state.clear()
        return

    if not await db.student_group_exists(message.text):
        await message.answer("–ì—Ä—É–ø–∏ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –Ω–µ–º–∞—î", reply_markup=super_admin_kb())
        await state.clear()
        return

    await db.delete_student_group_photo(message.text)
    await message.answer("–†–æ–∑–∫–ª–∞–¥ –≥—Ä—É–ø—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=super_admin_kb())
