from keyboards import *
from aiogram import types
from data_base import Database

from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageNotModified


# ===========================–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üßÆ============================
async def stats_all(message: types.Message):
    db = await Database.setup()
    value_stud = await db.count_user_sql()
    value_teach = await db.count_teacher_sql()
    await message.answer(
f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ :</b>
 ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –±–æ—Ç—ñ : {value_stud}
 ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —É –±–æ—Ç—ñ : {value_teach}
""", reply_markup = update_kb, parse_mode="HTML")

async def stats_all_query(query: types.CallbackQuery):
    db = await Database.setup()
    value_stud = await db.count_user_sql()
    value_teach = await db.count_teacher_sql()
    try:
        await query.message.edit_text(
f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ :</b>
 ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –±–æ—Ç—ñ : {value_stud}
 ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —É –±–æ—Ç—ñ : {value_teach}
""", reply_markup = update_kb, parse_mode="HTML")
    except MessageNotModified:
        await query.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è.\n–ß–æ–º—É –± –Ω–µ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏\n–±–æ—Ç–∞ —Å–≤–æ—ó–º –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞–º? üòã", show_alert=True)



text = {
    "stats_all": ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üßÆ", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "Stats", "stat", "S"],
}


def register_handler_stats(dp: Dispatcher):
    dp.register_message_handler(
        stats_all, Text(ignore_case=True, equals=text["stats_all"])
    )
    dp.register_callback_query_handler(stats_all_query, text="update")

