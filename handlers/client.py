from aiogram import types
from aiogram.dispatcher import Dispatcher
from config import super_admin_admin, super_admin_ura
from keyboards import *
from data_base.controller_db import *
import datetime

#===========================–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥============================
async def view_coupes(message: types.Message):
    if await user_exists_sql(message.from_user.id):
        ids = message.from_user.id
        if await see_rod_sql(str(ids)):
            await message.answer_photo(photka.get(),date_coupes.get())
        elif await see_rod_sql(str(ids)) == False:
            await message.answer('‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ–º–∞—î...‚òπÔ∏è')
    elif await teachers_exists_sql(message.from_user.id):
        ids = message.from_user.id
        if await see_rod_t_sql(str(ids)):
            await message.answer_photo(photka_teachers.get(),date_coupes.get())
        elif await see_rod_t_sql(str(ids)) == False:
            await message.answer('‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≤–∞c —â–µ –Ω–µ–º–∞—î...‚òπÔ∏è')
    elif not await user_exists_sql(message.from_user.id) and not await teachers_exists_sql(message.from_user.id):
        await message.answer("‚ùóÔ∏è–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó‚ùóÔ∏è", reply_markup= kb_start)

#===========================–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É============================
async def view_calls(message: types.Message):
    if await user_exists_sql(message.from_user.id) or  message.from_user.id == super_admin_admin or super_admin_ura == message.from_user.id or await teachers_exists_sql(message.from_user.id):
        check = await see_calls_sql()
        if not check:
            await message.answer("‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ‚òπÔ∏è")
        elif check:
            await see_calls_sql()
            await message.answer_photo(id_photka.get(),date_calls.get())
    elif not await user_exists_sql(message.from_user.id) and not await teachers_exists_sql(message.from_user.id):
        await message.answer("‚ùóÔ∏è–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó‚ùóÔ∏è", reply_markup= kb_start)

#===========================–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É============================
async def delete_user(message: types.Message):
    if await user_exists_sql(message.from_user.id):
        if await admin_exists_sql(message.from_user.id):
            await delete_users_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start_admin)
        else:
            await delete_users_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start)
    elif await teachers_exists_sql(message.from_user.id):
        if await admin_exists_sql(message.from_user.id):
            await delete_teachers_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start_admin)
        else:
            await delete_teachers_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start)
    elif not await user_exists_sql(message.from_user.id) and not await teachers_exists_sql(message.from_user.id):
        await message.answer("üåö–í–∏ —ñ —Ç–∞–∫ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ñ\n–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó", reply_markup=kb_start)

#=========================== –î—Ä—ñ–± ===========================
async def fraction(message: types.Message):
    today = datetime.date.today()
    week_number = today.isocalendar()[1]
    if week_number % 2 == 0:
        await message.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - <b>–∑–Ω–∞–º–µ–Ω–Ω–∏–∫</b> ü´°",parse_mode="HTML")
    elif week_number % 2 != 0:
        await message.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - <b>—á–∏—Å–µ–ª—å–Ω–∏–∫</b> ü´°",parse_mode="HTML")


#===========================–ü—É—Å—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä============================
#@dp.message_handler()
async def all_text(message: types.Message):
    if message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø–∞—Ä" or message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤" or message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É" or message.text == "—Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤" or message.text == "—Ä–æ–∑–∫–ª–∞–¥ –ø–∞—Ä":
        await message.answer("–ë–æ—Ç –æ–Ω–æ–≤–∏–≤—Å—è, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ‚¨áÔ∏è",reply_markup = kb_start_user)
    elif await admin_exists_sql(message.from_user.id) and message.text == "–ê–¥–º—ñ–Ω üîë":
        await message.answer("–ê–¥–º—ñ–Ω—Å—å–∫–∞ —á–∞—Å—Ç–∏–Ω–∞", reply_markup = kb_admin)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup = kb_infs)
#    elif message.text == "–ù–∞–∑–∞–¥" and await admin_exists_sql(message.from_user.id):
#        await message.answer("–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è",reply_markup=kb_admin)
#    elif message.text == "–ù–∞–∑–∞–¥" and await user_exists_sql(message.from_user.id):
#        await message.answer("–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è",reply_markup=kb_client)
#    elif message.text == "–ù–∞–∑–∞–¥" and message.from_user.id == super_admin_admin or message.from_user.id == super_admin_ura:
#        await message.answer("–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=sadmin)
    


#===========================—Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä============================
def register_handler_client(dp : Dispatcher):
        dp.register_message_handler(view_coupes,text = ["–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä ü•±","–†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å ü•±"])
        dp.register_message_handler(view_calls,text = "–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ ‚åöÔ∏è")
        dp.register_message_handler(delete_user,text = ["–ü–µ—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å ü§®"])
        dp.register_message_handler(fraction,text = ["–ß/–ó ü§®"])
        dp.register_message_handler(all_text)