import datetime
import asyncio
import asyncache
import cachetools

from aiogram import types
from aiogram.dispatcher import Dispatcher
from config import super_admin_admin, super_admin_ura
from create_bot import bot
from keyboards import *
from data_base.controller_db import *
from aiogram.dispatcher.filters import Text
import random as r
from create_bot import alerts_client
from handlers.stats import stats_schedule_add


# ===========================–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥============================
async def view_coupes(message: types.Message):
    await stats_schedule_add("–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä üëÄ", 1)
    if await user_exists_sql(message.from_user.id):
        boolen, photo, date = await see_rod_sql(message.from_user.id)
        if boolen:
            await message.answer_photo(photo, date)
        elif not boolen:
            await message.answer("‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ–º–∞—î...‚òπÔ∏è")
    elif await teachers_exists_sql(message.from_user.id):
        boolen, photo, date = await see_rod_t_sql(message.from_user.id)
        if boolen:
            await message.answer_photo(photo, date)
        elif not boolen:
            await message.answer("‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≤–∞c —â–µ –Ω–µ–º–∞—î...‚òπÔ∏è")
    elif not await user_exists_sql(
        message.from_user.id
    ) and not await teachers_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer("‚ùóÔ∏è–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó‚ùóÔ∏è", reply_markup=kb_start)
        else:
            await message.answer("‚ùóÔ∏è–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –±–æ—Ç–∞ —Ç–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å‚ùóÔ∏è")


# ===========================–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É============================
async def view_calls(message: types.Message):
    await stats_schedule_add("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ ‚åöÔ∏è", 1)
    if (
        await user_exists_sql(message.from_user.id)
        or message.from_user.id == super_admin_admin
        or super_admin_ura == message.from_user.id
        or await teachers_exists_sql(message.from_user.id)
    ):
        check, value, date = await see_calls_sql()
        if not check:
            await message.answer("‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ‚òπÔ∏è")
        elif check:
            await see_calls_sql()
            await message.answer_photo(value, date)
    elif not await user_exists_sql(
        message.from_user.id
    ) and not await teachers_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer("‚ùóÔ∏è–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó‚ùóÔ∏è", reply_markup=kb_start)
        else:
            await message.answer("‚ùóÔ∏è–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –±–æ—Ç–∞ —Ç–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å‚ùóÔ∏è")


# ===========================–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É============================
async def delete_user(message: types.Message):
    if await user_exists_sql(message.from_user.id):
        if await admin_exists_sql(message.from_user.id):
            await delete_users_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start_admin)
        else:
            await delete_users_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start)
    elif await teachers_exists_sql(message.from_user.id):
        if await admin_exists_sql(message.from_user.id):
            await delete_teachers_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start_admin)
        else:
            await delete_teachers_sql(message.from_user.id)
            await message.answer("üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=kb_start)
    elif not await user_exists_sql(
        message.from_user.id
    ) and not await teachers_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer("üåö–í–∏ —ñ —Ç–∞–∫ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ñ\n–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó", reply_markup=kb_start)
        else:
            await message.answer("üåö–í–∏ —ñ —Ç–∞–∫ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ñ\n–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –±–æ—Ç–∞ —Ç–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å")


# =========================== –î—Ä—ñ–± ===========================
async def fraction(message: types.Message):
    await stats_schedule_add("–ß/–ó —Ç–∏–∂–¥–µ–Ω—å ‚úèÔ∏è", 1)
    delta = datetime.timedelta(hours=2, minutes=0)
    todays = datetime.datetime.now(datetime.timezone.utc) + delta
    days = int(todays.strftime("%d"))
    years = int(todays.strftime("%y"))
    mouth = int(todays.strftime("%m"))
    today = datetime.date(year=years, month=mouth, day=days)
    week_number = today.isocalendar()[1]
    if week_number % 2 == 0:
        await message.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - <b>–∑–Ω–∞–º–µ–Ω–Ω–∏–∫</b> ü´°", parse_mode="HTML")
    elif week_number % 2 != 0:
        await message.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - <b>—á–∏—Å–µ–ª—å–Ω–∏–∫</b> ü´°", parse_mode="HTML")


# =========================== –¢—Ä–∏–≤–æ–≥–∞ ===========================
@asyncache.cached(cachetools.TTLCache(1, 23))
async def alert_func():
    # –î–æ—Å—Ç–∞—é —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —É —è–∫–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —Ç–∏–ø—É air_raid
    active_alerts = await alerts_client.get_active_alerts()
    filtered_alerts = active_alerts.filter(
        "location_type", "oblast", "alert_type", "air_raid"
    )

    # –î–æ—Å—Ç–∞—é —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –æ–±–ª–∞—Å—Ç–µ–π —É —è–∫–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞
    count = len(filtered_alerts)
    all_alerts = f"üåç –û–±–ª–∞—Å—Ç—ñ –∑ —Ç—Ä–∏–≤–æ–≥–æ—é({count} –∑ 26):\n\n"
    list_alerts_oblast_title = []
    for title in filtered_alerts:
        list_alerts_oblast_title.append(title.location_title)
    list_alerts_oblast_title.sort()

    # –û–±–ª–∞—Å—Ç—ñ —è–∫—ñ –±—É–¥—É—Ç—å –Ω–∞ –ø–µ—Ä—à–æ–º—É –º—ñ—Å—Ü—ñ
    need_oblast_title = [
        "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    ]
    # —Å–ø–∏—Å–æ–∫ —É —è–∫–æ–º—É –±—É–¥—É—Ç—å –æ–±–ª–∞—Å—Ç—ñ —è–∫—ñ –Ω–∞–º –ø—ñ–¥—Ö–æ–¥—è—Ç—å –∑–∞ —Å–ø–∏—Å–æ–∫–∏ –≤–∏—â–µ —ñ —É –Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥–∞
    need_oblast_title_list_new = []
    # –¶–∏–∫–ª –ø–µ–æ–µ–≤—ñ—Ä–∫–∏ —á–µ—Ä–µ—â –ø–æ–º–∏–ª–∫—É
    for j in range(0, len(need_oblast_title)):
        try:
            list_alerts_oblast_title.index(need_oblast_title[j])
            list_alerts_oblast_title.remove(need_oblast_title[j])
            need_oblast_title_list_new.insert(0, need_oblast_title[j])
        except ValueError:
            await asyncio.sleep(0.05)
    # –†–æ–±–ª—é –≥–∞—Ä–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if len(need_oblast_title_list_new) == 0 and len(list_alerts_oblast_title) == 0:
        all_alerts += f" - –¢—Ä–∏–≤–æ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ üü¢\n"
    else:
        if len(need_oblast_title_list_new) == 0:
            all_alerts += f"–ó–∞—Ö—ñ–¥–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ :\n ‚Ä¢ –ù–µ–º–∞—î\n\n"
        else:
            all_alerts += f"–ó–∞—Ö—ñ–¥–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ :\n"
            for alert in need_oblast_title_list_new:
                all_alerts += " ‚Ä¢ " + alert + "\n"
            all_alerts += "\n"
        if len(list_alerts_oblast_title) == 0:
            all_alerts += f"–Ü–Ω—à—ñ –æ–±–ª–∞—Å—Ç—ñ :\n ‚Ä¢ –ù–µ–º–∞—î"
        else:
            all_alerts += f"–Ü–Ω—à—ñ –æ–±–ª–∞—Å—Ç—ñ :\n"
            for alert in list_alerts_oblast_title:
                all_alerts += " ‚Ä¢ " + alert + "\n"
    return all_alerts
    """–ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö —è–∫—ñ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤—ñ–¥ API https://alerts.in.ua/
    {'id': 8757,
      'location_title': '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 
      'location_type': 'oblast',
      'started_at': datetime.datetime(2022, 4, 4, 19, 45, 39, tzinfo=<DstTzInfo 'Europe/Kyiv' EEST+3:00:00 DST>),
      'finished_at': None, 'updated_at': datetime.datetime(2022, 4, 8, 11, 4, 26, 316000, tzinfo=<DstTzInfo 'Europe/Kyiv' EEST+3:00:00 DST>),
      'alert_type': 'air_raid',
      'location_uid': '16',
      'location_oblast': '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
      'location_raion': None,
      'notes': None,
      'calculated': None}, 

    {'id': 28288, 
     'location_title': '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º', 
     'location_type': 'oblast', 
     'started_at': datetime.datetime(2022, 12, 11, 0, 22, tzinfo=<DstTzInfo 'Europe/Kyiv' EET+2:00:00 STD>), 
     'finished_at': None, 'updated_at': datetime.datetime(2022, 12, 12, 14, 20, 11, 900000, tzinfo=<DstTzInfo 'Europe/Kyiv' EET+2:00:00 STD>), 
     'alert_type': 'air_raid', 
     'location_uid': '29', 
     'location_oblast': '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º', 
     'location_raion': None, 
     'notes': '–ó–≥—ñ–¥–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –û—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –∫–∞—Ä—Ç —Ç—Ä–∏–≤–æ–≥', 
     'calculated': None}"""


# =========================== –¢—Ä–∏–≤–æ–≥–∞ ===========================
async def alert(message: types.Message):
    await stats_schedule_add("–¢—Ä–∏–≤–æ–≥–∏ ‚ö†Ô∏è", 1)
    all_alerts = await alert_func()
    await message.answer(
        all_alerts + "\n" + "<a href='https://alerts.in.ua/'>–î–∞–Ω—ñ –∑ —Å–∞–π—Ç—É</a>",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )





# ===========================–ü—É—Å—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä============================
async def all_text(message: types.Message):
    if await admin_exists_sql(message.from_user.id) and message.text == "–ê–¥–º—ñ–Ω üîë":
        await message.answer("–ê–¥–º—ñ–Ω—Å—å–∫–∞ —á–∞—Å—Ç–∏–Ω–∞", reply_markup=kb_admin)
    else:
        if message.chat.type == "private":
            await message.answer("–ù–µ–∑–Ω–∞—é —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–º\n–ù–∞—Ç–∏—Å–Ω–∏ /start —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π\n–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑–Ω–∏–∑—É")
        else:
            await bot.send_message(-813473243, "–ì—Ä—É–ø–∞ " + str(message.chat.title) + "\n" + str(message.from_user.username) + "\n" + str(message.from_user.id) + "\n\n" + message.text)






text = {
    "view_coupes": ["–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä üëÄ",
                    "–†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å üëÄ",
                    "—è–∫–∏–π —Ä–æ–∑–∫–ª–∞–¥?",
                    "—Ä–æ–∑–∫–ª–∞–¥",
                    "–ø–∞—Ä–∏",
                    "–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä",
                    "–†–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å",
                    "coupes"
                    "—è–∫—ñ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä–∏",
                    "—è–∫—ñ –ø–∞—Ä–∏",
                    "—è–∫—ñ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä–∏?",
                    "—è–∫—ñ –ø–∞—Ä–∏?",
                    "–Ø–∫—ñ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä–∏?",
                    "–Ø–∫–∞ –ø–µ—Ä—à–∞ –ø–∞—Ä–∞ –∑–∞–≤—Ç—Ä–∞?",
                    "–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?",
                    "–Ø–∫—ñ –ø–∞—Ä–∏ –±—É–¥—É—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞?",
                    ],
    "view_calls": ["–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ ‚åöÔ∏è","–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤","–¥–∑–≤—ñ–Ω–∫–∏"],
    "delete_user": ["–í–∏–π—Ç–∏ üö´", "–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É üö´"],
    "fraction": ["–ß/–ó —Ç–∏–∂–¥–µ–Ω—å ‚úèÔ∏è",
                 "—á–∑",
                 "–ß/–ó",
                 "–ß/–ó —Ç–∏–∂–¥–µ–Ω—å",
                 "—á–∏—Å–µ–ª—å–Ω–∏–∫",
                 "–∑–Ω–∞–º–µ–Ω–Ω–∏–∫",
                 "—è–∫–∏–π —Ç–∏–∂–¥–µ–Ω—å"
                 ],
    "alert": ["–¢—Ä–∏–≤–æ–≥–∏ ‚ö†Ô∏è", "–¢—Ä–∏–≤–æ–≥–∞", "alert", "—Ç—Ä–∏–≤–æ–≥–∞ —î?"],
}

# ===========================—Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä============================
def register_handler_client(dp: Dispatcher):
    dp.register_message_handler(view_coupes, Text(ignore_case=True, equals=text["view_coupes"]))
    dp.register_message_handler(view_calls,Text(ignore_case=True, equals=text["view_calls"]))
    dp.register_message_handler(delete_user, text=["–í–∏–π—Ç–∏ üö´", "–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É üö´"])
    dp.register_message_handler(fraction,  Text(ignore_case=True, equals=text["fraction"]))
    dp.register_message_handler(alert, Text(ignore_case=True, equals=text["alert"]))
    dp.register_message_handler(all_text)
