from aiogram import Router, types
from aiogram.filters import Command
from aiogram.filters.text import Text

router = Router()


@router.message(Command(commands=["start"]))
async def command_start_handler(message: types.Message) -> None:
    await message.answer(f"Hello, <b>{message.from_user.full_name}!</b>")


import datetime

from keyboards import *
from aiogram import types
from handlers.menu import menu
from data_base import Database
from task.alarm import alert_func
from config import SUPER_ADMIN
from handlers.text_handlers import *


# ===========================–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥============================
@router.message(
    Text(text=student_text["view_coupes"], ignore_case=True)
)  # registration router
async def view_coupes(message: types.Message):
    db = await Database.setup()
    if await db.student_exists_sql(message.from_user.id):
        boolen, photo, date = await db.see_rod_sql(message.from_user.id)
        if boolen:
            await message.answer_photo(photo, date)
        elif not boolen:
            await message.answer("‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ–º–∞—î...‚òπÔ∏è")
    elif await db.teacher_exists_sql(message.from_user.id):
        boolen, photo, date = await db.see_rod_t_sql(message.from_user.id)
        if boolen:
            await message.answer_photo(photo, date)
        elif not boolen:
            await message.answer("‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥—É –¥–ª—è –≤–∞c —â–µ –Ω–µ–º–∞—î...‚òπÔ∏è")
    elif not await db.student_exists_sql(
        message.from_user.id
    ) and not await db.teacher_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer(
                "‚ùóÔ∏è–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó‚ùóÔ∏è", reply_markup=await start_all_kb()
            )
        else:
            await message.answer("‚ùóÔ∏è–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –±–æ—Ç–∞ —Ç–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å‚ùóÔ∏è")


# ===========================–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É============================
@router.message(
    Text(text=student_text["view_calls"], ignore_case=True)
)  # registration router
async def view_calls(message: types.Message):
    db = await Database.setup()
    if (
        await db.student_exists_sql(message.from_user.id)
        or await db.teacher_exists_sql(message.from_user.id)
        or message.from_user.id in SUPER_ADMIN
    ):
        check, value, date = await db.see_photo_sql('calls')
        if not check:
            await message.answer("‚òπÔ∏è–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ‚òπÔ∏è")
        elif check:
            await message.answer_photo(value, date)
    elif not await db.student_exists_sql(
        message.from_user.id
    ) and not await db.teacher_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer(
                "‚ùóÔ∏è–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó‚ùóÔ∏è", reply_markup=await start_all_kb()
            )
        else:
            await message.answer("‚ùóÔ∏è–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –±–æ—Ç–∞ —Ç–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å‚ùóÔ∏è")


# ===========================–ó–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É============================
@router.message(
    Text(text=student_text["delete_user"], ignore_case=True)
)  # registration router
async def delete_user(message: types.Message):
    db = await Database.setup()
    if await db.student_exists_sql(message.from_user.id):
        if await db.admin_exists_sql(message.from_user.id):
            await db.delete_student_sql(message.from_user.id)
            await message.answer(
                "üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=await start_admin_kb()
            )
        else:
            await db.delete_student_sql(message.from_user.id)
            await message.answer(
                "üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=await start_all_kb()
            )
    elif await db.teacher_exists_sql(message.from_user.id):
        if await db.admin_exists_sql(message.from_user.id):
            await db.delete_teacher_sql(message.from_user.id)
            await message.answer(
                "üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=await start_admin_kb()
            )
        else:
            await db.delete_teacher_sql(message.from_user.id)
            await message.answer(
                "üôÇ–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—ÉüôÇ", reply_markup=await start_all_kb()
            )
    elif not await db.student_exists_sql(
        message.from_user.id
    ) and not await db.teacher_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer(
                "üåö–í–∏ —ñ —Ç–∞–∫ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ñ\n–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
                reply_markup=await start_all_kb(),
            )
        else:
            await message.answer(
                "üåö–í–∏ —ñ —Ç–∞–∫ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ñ\n–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –±–æ—Ç–∞ —Ç–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å"
            )


# =========================== –î—Ä—ñ–± ===========================
@router.message(
    Text(text=student_text["fraction"], ignore_case=True)
)  # registration router
async def fraction(message: types.Message):
    delta = datetime.timedelta(hours=2, minutes=0)
    todays = datetime.datetime.now(datetime.timezone.utc) + delta
    days = int(todays.strftime("%d"))
    years = int(todays.strftime("%y"))
    mouth = int(todays.strftime("%m"))
    today = datetime.date(year=years, month=mouth, day=days)
    week_number = today.isocalendar()[1]
    if week_number % 2 == 0:
        await message.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - <b>–∑–Ω–∞–º–µ–Ω–Ω–∏–∫</b> ü´°", parse_mode="HTML")
    elif week_number % 2 != 0:
        await message.answer("–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å - <b>—á–∏—Å–µ–ª—å–Ω–∏–∫</b> ü´°", parse_mode="HTML")


# =========================== –¢—Ä–∏–≤–æ–≥–∞ ===========================
@router.message(
    Text(text=student_text["alert"], ignore_case=True)
)  # registration router
async def alert(message: types.Message):
    all_alerts, check = await alert_func()
    await message.answer(
        all_alerts + "\n" + "<a href='https://alerts.in.ua/'>–î–∞–Ω—ñ –∑ —Å–∞–π—Ç—É</a>",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


# ===========================–ü—É—Å—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä============================
@router.message()
async def all_text(message: types.Message):
    db = await Database.setup()
    if await db.admin_exists_sql(message.from_user.id) and message.text == "–ê–¥–º—ñ–Ω üîë":
        await message.answer("–ê–¥–º—ñ–Ω—Å—å–∫–∞ —á–∞—Å—Ç–∏–Ω–∞", reply_markup=await admin_kb())
    else:
        if message.text == "–ú–µ–Ω—é üë•":
            await menu(message)
