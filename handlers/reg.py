# import
import asyncio

# from import
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import (
    MessageToDeleteNotFound,
    MessageCantBeDeleted,
    BadRequest,
)
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text, ChatTypeFilter
from keyboards import *
from random import randint as rd
from handlers.stats import stats_schedule_add
from data_base import Database

passwords = (
    str(rd(1, 9))
    + str(rd(1, 9))
    + str(rd(1, 9))
    + str(rd(1, 9))
    + str(rd(1, 9))
    + str(rd(1, 9))
    + str(rd(1, 9))
    + str(rd(1, 9))
)


# =========–ö–ª–∞—Å—Å –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É=========
class FSMReg(StatesGroup):
    course_groupe_reg = State()
    teachers_reg = State()
    password_reg = State()
    reply_reg = State()


# ===========================–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚öôÔ∏è============================
async def registration(message: types.Message):
    db = await Database.setup()
    if message.text == "–†–æ–∑–∫–ª–∞–¥ ‚öôÔ∏è":
        await stats_schedule_add("–†–æ–∑–∫–ª–∞–¥ ‚öôÔ∏è", 1)
    if (
        (not await db.user_exists_sql(message.from_user.id))
        and (not await db.admin_exists_sql(message.from_user.id))
        and (not await db.teachers_exists_sql(message.from_user.id))
    ):
        if message.chat.type == "private":
            await message.answer(
                "ü§î –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ü§î\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–∫–∞—É–Ω—Ç—É ‚¨áÔ∏è", reply_markup=kb_choice
            )
            await FSMReg.reply_reg.set()
        else:
            try:
                msg = await message.answer(
                    "ü§® –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ @pedbot_bot\n—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /start"
                )
                await asyncio.sleep(2)
                await message.delete()
                await msg.delete()
            except (MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest):
                await message.answer(
                    "–ü–æ–º–∏–ª–∫–∞, —è –Ω–µ –º–æ–∂—É –∞–≤—Ç–æ–≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞"
                )
    elif await db.user_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer("–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=kb_client)
        else:
            try:
                msg = await message.answer("‚ö†Ô∏è –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ñ")
                await asyncio.sleep(2)
                await message.delete()
                await msg.delete()
            except (MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest):
                await message.answer(
                    "–ü–æ–º–∏–ª–∫–∞, —è –Ω–µ –º–æ–∂—É –∞–≤—Ç–æ–≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞"
                )
    elif await db.teachers_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer("–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=kb_teachers)
        else:
            try:
                msg = await message.answer("‚ö†Ô∏è –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ñ")
                await asyncio.sleep(2)
                await message.delete()
                await msg.delete()
            except (MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest):
                await message.answer(
                    "–ü–æ–º–∏–ª–∫–∞, —è –Ω–µ –º–æ–∂—É –∞–≤—Ç–æ–≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞"
                )
    elif await db.admin_exists_sql(message.from_user.id):
        if message.chat.type == "private":
            await message.answer(
                "ü§î –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ü§î\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–∫–∞—É–Ω—Ç—É ‚¨áÔ∏è", reply_markup=kb_choice
            )
            await FSMReg.reply_reg.set()
        else:
            try:
                msg = await message.answer(
                    "ü§® –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ @pedbot_bot\n—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /start"
                )
                await asyncio.sleep(2)
                await message.delete()
                await msg.delete()
            except (MessageToDeleteNotFound, MessageCantBeDeleted, BadRequest):
                await message.answer(
                    "–ü–æ–º–∏–ª–∫–∞, —è –Ω–µ –º–æ–∂—É –∞–≤—Ç–æ–≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞"
                )


async def reg(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        if await db.admin_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_admin)
        elif await db.user_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        elif await db.teachers_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        else:
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start)
    elif message.text == "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üîê":
        await FSMReg.password_reg.set()
        await message.answer("üîí –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å üîë", reply_markup=ReplyKeyboardRemove())
    elif message.text == "–°—Ç—É–¥–µ–Ω—Ç üë©‚Äçüéì":
        await FSMReg.course_groupe_reg.set()
        await message.answer(
            "‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å —ñ –≥—Ä—É–ø—É –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –Ω–∏–∂—á–µ", reply_markup=await get_kb()
        )
    elif message.text == "–í–∏–∫–ª–∞–¥–∞—á üë®‚Äçüè´":
        await FSMReg.teachers_reg.set()
        await message.answer(
            "‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –Ω–∏–∂—á–µ", reply_markup=await get_t_kb()
        )
    else:
        await message.answer("‚òπÔ∏è –ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚òπÔ∏è", reply_markup=kb_start)
        await state.finish()


async def regAdmin(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        if await db.admin_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_admin)
        elif await db.user_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        elif await db.teachers_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        else:
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start)
    elif message.text == passwords:
        if await db.admin_exists_sql(message.from_user.id):
            await message.answer("–í–∏ –≤–∂–µ –∞–¥–º—ñ–Ω", reply_markup=kb_start_admin)
            await state.finish()
        else:
            first_name = message.from_user.first_name
            username = message.from_user.username
            await db.add_admin_sql(message.from_user.id, first_name, username)
            await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=kb_admin)
            await state.finish()
    else:
        await message.answer("‚òπÔ∏è –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ‚òπÔ∏è", reply_markup=kb_start)
        await state.finish()


async def regUser(message: types.Message, state: FSMContext):
    db = await Database.setup()
    first_name = message.from_user.first_name
    username = message.from_user.username
    groupe = message.text
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        if await db.admin_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_admin)
        elif await db.user_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        elif await db.teachers_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        else:
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start)
    elif await db.group_exists_sql(message.text):
        await db.add_user_sql(message.from_user.id, first_name, username, groupe)
        await state.finish()
        await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=kb_client)
    else:
        await message.answer(
            "‚òπÔ∏è –ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏, –∑–≤—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n–¥–ª—è —Ç–æ–≥–æ —â–æ–± —ó—ó –¥–æ–¥–∞–ª–∏ \n–Ü –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É",
            reply_markup=kb_start,
        )
        await state.finish()


async def regTeachers(message: types.Message, state: FSMContext):
    db = await Database.setup()
    first_name = message.from_user.first_name
    username = message.from_user.username
    teachers_name = message.text
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        if await db.admin_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_admin)
        elif await db.user_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        elif await db.teachers_exists_sql(message.from_user.id):
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start_user)
        else:
            await message.answer("‚¨áÔ∏è–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚¨áÔ∏è", reply_markup=kb_start)
    elif await db.teachers_name_exists_sql(message.text):
        await db.add_teachers_sql(
            message.from_user.id, first_name, username, teachers_name
        )
        await state.finish()
        await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=kb_teachers)
    else:
        await message.answer(
            "‚òπÔ∏è –ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤—á–∏—Ç–µ–ª—è, –∑–≤—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n–¥–ª—è —Ç–æ–≥–æ —â–æ–± –π–æ–≥–æ –¥–æ–¥–∞–ª–∏ \n–Ü –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É",
            reply_markup=kb_start,
        )
        await state.finish()


text = {
    "registration": [
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚öôÔ∏è",
        "–†–æ–∑–∫–ª–∞–¥ ‚öôÔ∏è",
        "Reg",
        "registration",
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è",
        "–†–æ–∑–∫–ª–∞–¥",
    ],
}


# ===========================—Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä============================
def register_handler_reg(dp: Dispatcher):
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    dp.register_message_handler(
        registration,
        Text(ignore_case=True, equals=text["registration"]),
        ChatTypeFilter("private"),
        state=None,
    )
    dp.register_message_handler(reg, state=FSMReg.reply_reg)
    dp.register_message_handler(regAdmin, state=FSMReg.password_reg)
    dp.register_message_handler(regUser, state=FSMReg.course_groupe_reg)
    dp.register_message_handler(regTeachers, state=FSMReg.teachers_reg)
