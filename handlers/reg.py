# import
import asyncache
import cachetools

# from import
from aiogram import types
from data_base import Database
from random import choice
from keyboards import *

from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from handlers.stats import stats_schedule_add
from handlers.menu import menu

from aiogram.dispatcher.filters import Text, ChatTypeFilter

from aiogram.dispatcher.filters.state import State, StatesGroup


# =========–ö–ª–∞—Å—Å –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É=========
class FSMReg(StatesGroup):
    course_groupe_reg = State()
    teachers_reg = State()
    password_reg = State()
    reply_reg = State()

@asyncache.cached(cachetools.TTLCache(1, 120))
async def password_for_admin():
    password = ""
    for x in range(8): 
        password = password + choice(list('1234567890ABCDEFGHIGKLMNOPQRSTUVYXWZ'))
    return password


# ===========================–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚öôÔ∏è============================
async def registration(message: types.Message):
    db = await Database.setup()
    if message.text == "–†–æ–∑–∫–ª–∞–¥ ‚öôÔ∏è":
        await stats_schedule_add("–†–æ–∑–∫–ª–∞–¥ ‚öôÔ∏è", 1)

    if await db.user_exists_sql(message.from_user.id):
        await message.answer("–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=kb_client)

    elif await db.teachers_exists_sql(message.from_user.id):
        await message.answer("–í–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è", reply_markup=kb_teachers)

    elif await db.admin_exists_sql(message.from_user.id):
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–∫–∞—É–Ω—Ç—É ‚¨áÔ∏è", reply_markup=kb_choice)
        await FSMReg.reply_reg.set()

    else:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–∫–∞—É–Ω—Ç—É ‚¨áÔ∏è", reply_markup=kb_choice)
        await FSMReg.reply_reg.set()

async def reg(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if message.text == "–ú–µ–Ω—é üë•":
        await menu(message)
        await state.finish()

    elif message.text == "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üîê":
        await FSMReg.password_reg.set()
        await message.answer("üîí –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å üîë", reply_markup=ReplyKeyboardRemove())

    elif message.text == "–°—Ç—É–¥–µ–Ω—Ç üë©‚Äçüéì":
        await FSMReg.course_groupe_reg.set()
        await message.answer("‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å —ñ –≥—Ä—É–ø—É –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –Ω–∏–∂—á–µ", reply_markup=await get_kb())

    elif message.text == "–í–∏–∫–ª–∞–¥–∞—á üë®‚Äçüè´":
        await FSMReg.teachers_reg.set()
        await message.answer("‚¨áÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –Ω–∏–∂—á–µ", reply_markup=await get_t_kb())
    
    else:
        await message.answer("‚òπÔ∏è –ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚òπÔ∏è")
    
    
async def regAdmin(message: types.Message, state: FSMContext):
    db = await Database.setup()
    if message.text == "–ú–µ–Ω—é üë•":
        await menu(message)
        await state.finish()
        
    elif message.text == await password_for_admin():
        if await db.admin_exists_sql(message.from_user.id):
            await message.answer("–í–∏ –≤–∂–µ –∞–¥–º—ñ–Ω", reply_markup=kb_start_admin)
            await state.finish()
        else:
            first_name = message.from_user.first_name
            username = message.from_user.username
            user_id = message.from_user.id
            await db.add_admin_sql(user_id, first_name, username)
            await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=kb_admin)
            await state.finish()
    else:
        await message.answer("‚òπÔ∏è –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ‚òπÔ∏è", reply_markup=kb_start)
        await state.finish()


async def regUser(message: types.Message, state: FSMContext):
    db = await Database.setup()
    first_name = message.from_user.first_name
    username = message.from_user.username
    groupe = message.text

    if message.text == "–ú–µ–Ω—é üë•":
        await menu(message)
        await state.finish()

    elif await db.group_exists_sql(message.text):
        await db.add_user_sql(message.from_user.id, first_name, username, groupe)
        await state.finish()
        await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=kb_client)

    else:
        await message.answer("‚òπÔ∏è –ù–µ–º–∞—î —Ç–∞–∫–æ—ó –≥—Ä—É–ø–∏ —É —Å–ø–∏—Å–∫—É‚òπÔ∏è", reply_markup=kb_start,)
        await state.finish()


async def regTeachers(message: types.Message, state: FSMContext):
    db = await Database.setup()
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username
    group_teacher = message.text

    if message.text == "–ú–µ–Ω—é üë•":
        await menu(message)
        await state.finish()
        
    elif await db.teachers_name_exists_sql(message.text):
        await db.add_teachers_sql(user_id, first_name, username, group_teacher)
        await state.finish()
        await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ", reply_markup=kb_teachers)

    else:
        await message.answer("‚òπÔ∏è –ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤—á–∏—Ç–µ–ª—è —É —Å–ø–∏—Å–∫—É‚òπÔ∏è",reply_markup=kb_start)
        await state.finish()


text = {
    "registration": [
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚öôÔ∏è",
        "–†–æ–∑–∫–ª–∞–¥ ‚öôÔ∏è",
        "Reg",
        "registration",
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è",
        "–†–æ–∑–∫–ª–∞–¥",
]}


# ===========================—Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä============================
def register_handler_reg(dp: Dispatcher):
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    dp.register_message_handler(
        registration,
        Text(ignore_case=True, equals=text["registration"]),
        ChatTypeFilter("private"),
        state=None,)
    dp.register_message_handler(reg, state=FSMReg.reply_reg)
    dp.register_message_handler(regAdmin, state=FSMReg.password_reg)
    dp.register_message_handler(regUser, state=FSMReg.course_groupe_reg)
    dp.register_message_handler(regTeachers, state=FSMReg.teachers_reg)