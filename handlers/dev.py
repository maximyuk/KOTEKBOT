from aiogram import F, Router, types
from aiogram.filters import Text
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from create_bot import bot
from keyboards import *

router = Router()


class FSMSDev(StatesGroup):
    text_error = State()
    text_response = State()
    text_request = State()


# ======================================================================================
async def get_text(type: str, message: types.Message = None):
    # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
    main_text = (
        "–¶–µ –ø–∞–Ω–µ–ª—å —Ä–æ–∑—Ä–æ–±–∫–∏ –±–æ—Ç–∞ ü§ù\n\n"
        "–£ –Ω—ñ–π –≤–∏ –º–æ–∂–µ—Ç–µ :\n"
        "   ‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —É—á–∞—Å—Ç—å"
        " —É —Ä–æ–∑—Ä–æ–±—Ü—ñ —Ü—å–æ–≥–æ –±–æ—Ç–∞.\n"
        "   ‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –±–æ—Ç–∞"
        " –≤–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —ñ —Ç–ø.\n"
        "   ‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ\n"
        " –ø–æ–º–∏–ª–∫—É —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏.\n\n"
        "–í—ñ–¥–≥—É–∫ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É\n"
        "–Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–æ @botadmincat"
    )

    # –¢–µ–∫—Å—Ç –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    error_text = (
        "–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É/–ø–æ–º–∏–ª–∫—É.\n\n"
        "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏\n"
        "–≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "–¥–æ @botadmincat üôÉ"
    )

    # –¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Ç—É
    request_text = (
        "–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç\n"
        "–Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—Ä–æ–±—Ü—ñ –±–æ—Ç–∞\n\n"
        "–î–ª—è —Ü—å–æ–≥–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ:\n"
        " ‚Ä¢ –ù–∞–≤—á–∞—Ç–∏—Å—å —É –í–ü–ö (–±—É–¥—å - —è–∫–∏–π –∫—É—Ä—Å)\n"
        " ‚Ä¢ –ú–∞—î—Ç–µ –±—É—Ç–∏ @username\n"
        " ‚Ä¢ –ó–Ω–∞—Ç–∏:\n"
        "    –æ–±–æ–≤'—è–∑–∫–æ–≤–æ\n"
        "    - python (—Ä—ñ–≤–Ω—è –¥–∂—É–Ω–∞)\n"
        "    - aiogram v3—Ö\n"
        "    - SQL –∑–∞–ø–∏—Ç–∏ (aiosqlite)\n"
        "    - –ë—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º(–æ—é) –Ω–∞ GitHub\n"
        "    - –¢—Ä–æ—à–∫–∏ –∑–Ω–∞—Ç–∏ git\n"
        "    —ñ–Ω—à—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–≤—á–∏—Ç–∏ –∑–≥–æ–¥–æ–º\n"
        " ‚Ä¢ –¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –ø–æ–º–∏–ª–æ–∫ —É —Ç–µ–∫—Å—Ç—ñ.\n"
        "   –î–ª—è —Ü—å–æ–≥–æ –∑–Ω–∞—Ç–∏ —Ç–µ, —â–æ –≤–∏—â–µ –Ω–µ —Ç—Ä–µ–±–∞.\n"
        " ‚Ä¢ –ù–µ –±—É—Ç–∏ –º–∞–ª–æ—Ä–æ—Å–æ–º üòÉ\n\n"
        '–ü—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ü´°"\n'
        "–≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Ç—Ä–æ—à–∫–∏ —Ä–æ–∑–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ —Å–µ–±–µ."
    )

    if type == "main":
        return main_text
    elif type == "error":
        return error_text
    elif type == "request_t":
        return request_text
    elif type == "request_admin":
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Ç—É –¥–ª—è –∞–¥–º—ñ–Ω–∞
        request_text_for_admin = (
            f"–∑–∞–ø–∏—Ç\n{message.from_user.first_name}\n"
            f"@{message.from_user.username}\n"
            f"{message.from_user.id}"
        )
        return request_text_for_admin


# ======================================================================================


# ======================================================================================
# main message
@router.callback_query(Text(text="–†–æ–∑—Ä–æ–±–∫–∞ üß©", ignore_case=True))
async def join_development(query: types.CallbackQuery):
    await query.message.edit_text(await get_text("main"))
    await query.message.edit_reply_markup(reply_markup=await dev_kb())


# ======================================================================================


# ======================================================================================
# back
@router.callback_query(Text(text="back_dev"))
@router.callback_query(Text(text="back_dev"), FSMSDev.text_error)
@router.callback_query(Text(text="back_dev"), FSMSDev.text_response)
@router.callback_query(Text(text="back_dev"), FSMSDev.text_request)
async def join_development_query(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text(await get_text("main"))
    await query.message.edit_reply_markup(reply_markup=await dev_kb())


# ======================================================================================


# ======================================================================================
# error
@router.callback_query(Text(text="error"))
async def error(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text(await get_text("error"))
    await query.message.edit_reply_markup(reply_markup=await dev_back_kb())
    await state.set_state(FSMSDev.text_error)
    await state.update_data(query=query)


@router.message(F.text, FSMSDev.text_error)
async def error_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    query: types.CallbackQuery = data["query"]
    await message.delete()
    await state.clear()

    await query.message.edit_text(await get_text("main"))
    await query.message.edit_reply_markup(reply_markup=await dev_kb())
    await bot.send_message(
        chat_id=-1001873448980, message_thread_id=3, text=f"–ü–æ–º–∏–ª–∫–∞ :\n{message.text}"
    )


# ======================================================================================


# ======================================================================================
# response
@router.callback_query(Text(text="response"))
async def response(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ ü§ù")
    await query.message.edit_reply_markup(reply_markup=await dev_back_kb())
    await state.set_state(FSMSDev.text_response)
    await state.update_data(query=query)


@router.message(F.text, FSMSDev.text_response)
async def response_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    query: types.CallbackQuery = data["query"]
    await message.delete()
    await state.clear()

    await query.message.edit_text(await get_text("main"))
    await query.message.edit_reply_markup(reply_markup=await dev_kb())
    await bot.send_message(
        chat_id=-1001873448980, message_thread_id=5, text=f"–í—ñ–¥–≥—É–∫ :\n{message.text}"
    )


# ======================================================================================


# ======================================================================================
# –ó–ê–ü–ò–¢ –ù–ê –£–ß–ê–°–¢–¨
@router.callback_query(Text(text="request"))
async def request(query: types.CallbackQuery):
    await query.message.edit_text(await get_text("request_t"))
    await query.message.edit_reply_markup(reply_markup=await dev_choise_kb())


@router.callback_query(Text(text="okay"))
async def confirm_request(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —Ç—Ä—ñ—à–∫–∏ –ø—Ä–æ —Å–µ–±–µ ü•≥")
    await query.message.edit_reply_markup(reply_markup=await dev_back_kb())
    await state.set_state(FSMSDev.text_request)
    await state.update_data(query=query)


@router.message(F.text, FSMSDev.text_request)
async def send_request(message: types.Message, state: FSMContext):
    data = await state.get_data()
    query: types.CallbackQuery = data["query"]
    await message.delete()
    await state.clear()

    await bot.send_message(
        chat_id=-1001873448980,
        message_thread_id=8,
        text=f"{await get_text('request_admin', message)}\n{message.text}",
    )
    await query.message.edit_text(await get_text("main"))
    await query.message.edit_reply_markup(reply_markup=await dev_kb())
