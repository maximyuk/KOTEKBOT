import os
import random
import asyncio

from keyboards import *
from create_bot import bot
from aiogram import types
from data_base import Database

from handlers.stats import stats_schedule_add
from aiogram.dispatcher import Dispatcher, FSMContext

from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import RetryAfter

from aiogram.dispatcher.filters.state import State, StatesGroup





# =========–ö–ª–∞—Å—Å –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É=========
class FSMWrite(StatesGroup):
    text = State()
    group = State()
    teach = State()
    message_group = State()
    message_teach = State()


async def get_list():
    db = await Database.setup()
    list = await db.group_list_sql()
    return list


async def text_save(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("""
–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —è–∫–∏–π –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏—Å—è
—É –∑–∞–º—ñ—Ç–∫–∞—Ö –≤–∞—à–æ—ó –≥—Ä—É–ø–∏

–ù–∞–ø—Ä–∏–∫–ª–∞–¥ :
–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫: –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç

–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è : –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç

–í–∏ –∂ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—É–¥—å-—â–æ —Ü–µ –ª–∏—à–µ –ø—Ä–∏–∫–ª–∞–¥.""", reply_markup=cancle_inline_kb)
    await FSMWrite.text.set()
    

async def cancel(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ‚úÖ", reply_markup=text_inline_kb)
    await state.finish()


async def text_save1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    await stats_schedule_add("–î–æ–¥–∞—Ç–∏ –∑–∞–º—ñ—Ç–∫—É üìù", 1)

    if await db.user_exists_sql(message.from_user.id):
        if len(message.text) <= 1:
            await message.answer("–¢–µ–∫—Å—Ç –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑", reply_markup=text_inline_kb)
            await state.finish()
        else:
            text = message.text
            groups = await db.group_for_user_id(message.from_user.id)
            await db.add_text_sql(text, groups)
            await message.answer("–ó–∞–º—ñ—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=text_inline_kb)
            await state.finish()
    elif await db.teachers_exists_sql(message.from_user.id):
        if len(message.text) <= 1:
            await message.answer("–¢–µ–∫—Å—Ç –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑", reply_markup=text_inline_kb)
            await state.finish()
        else:
            text = message.text
            groups = await db.see_group_for_teach_id(message.from_user.id)
            await db.add_text_sql(text, groups)
            await message.answer("–ó–∞–º—ñ—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=text_inline_kb)
            await state.finish()
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É –≥—Ä—É–ø–∞—Ö")
        await state.finish()


async def see_text(message: types.Message):
    db = await Database.setup()
    await stats_schedule_add("–ó–∞–º—ñ—Ç–∫–∏ üìù", 1)
    if await db.user_exists_sql(message.from_user.id):
        groups = await db.group_for_user_id(message.from_user.id)
        boolean, text = await db.see_text_sql(groups)
        if boolean:
            await message.answer(
                "–ó–∞–º—ñ—Ç–∫–∏ –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ :\n\n"
                + text
                + "\n\n–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—ñ\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", reply_markup=text_inline_kb
            )
        elif not boolean:
            await message.answer(
                "–£ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –¥–æ–¥–∞–Ω–æ –Ω—ñ—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É\n–©–æ–± —Ü–µ –∑—Ä–æ–±–∏—Ç–∏\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", 
                reply_markup=text_inline_kb
            )
    elif await db.teachers_exists_sql(message.from_user.id):
        groups = await db.see_group_for_teach_id(message.from_user.id)
        boolean, text = await db.see_text_sql(groups)
        if boolean:
            await message.answer(
                "–í–∞—à—ñ –∑–∞–º—ñ—Ç–∫–∏ :\n\n"
                + text
                + "\n\n–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—ñ\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
                reply_markup=text_inline_kb
            )
        elif not boolean:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ –¥–æ–¥–∞–Ω–æ –Ω—ñ—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É\n–©–æ–± —Ü–µ –∑—Ä–æ–±–∏—Ç–∏\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", 
                reply_markup=text_inline_kb
            )
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")


#============= —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ø–∏—Å–∞—Ç–∏ 1 –µ—Ç–∞–ø | –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏
async def write(message: types.Message):
    db = await Database.setup()
    await stats_schedule_add("–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è", 1)
    if not await db.user_exists_sql(message.from_user.id):
        return
    
    await message.delete()
    msg = await message.answer("–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏", reply_markup=types.ReplyKeyboardRemove())
    await msg.delete()
    await message.answer(
        "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ\n—Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —ó—ó —ñ–º'—è –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup = await inline_kb_group())
    await FSMWrite.group.set()


#============= —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ø–∏—Å–∞—Ç–∏ 2 –µ—Ç–∞–ø | –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def write_group(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    group = await db.group_exists_sql(query.data)

    if not group:
        return
    
    await FSMWrite.message_group.set()
    await query.message.delete_reply_markup()
    msg = await query.message.edit_text(f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å :\n ‚Ä¢ –¢–µ–∫—Å—Ç üìù\n ‚Ä¢ –§–æ—Ç–æ üñº\n ‚Ä¢ –í—ñ–¥–µ–æ üìº\n ‚Ä¢ –°—Ç—ñ–∫–µ—Ä üíå\n ‚Ä¢ GIF ü™®", reply_markup=inline_back)
    async with state.proxy() as data:
        data["group"] = query.data
        data["msg_id"] = msg.message_id
        data["chat_id"] = msg.chat.id


#============= —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–ø–∏—Å–∞—Ç–∏ 3 –µ—Ç–∞–ø | –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

#============= –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö
async def get_data(message: types.Message, state: FSMContext):
    db = await Database.setup()
    async with state.proxy() as data:
        msg_id = data["msg_id"]
        chat_id = data["chat_id"]
        group = data["group"]
        group_user_writer = await db.group_for_user_id(message.from_user.id)
        all_user_their = await db.all_user_id_for_group_sql(group)
        all_user_us = await db.all_user_id_for_group_sql(group_user_writer)
        await bot.delete_message(chat_id, msg_id)
        await message.delete()
    """
    –ø–æ–≤–µ—Ä—Ç–∞—é 
    –≥—Ä—É–ø—É —è–∫—ñ–π –ø—ñ—à—É—Ç—å
    –≥—Ä—É–ø—É —è–∫–∞ –Ω–∞–ø–∏—Å–∞–ª–∞
    —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –≥—Ä—É–ø—ñ —è–∫—ñ–π –ø–∏—à—É—Ç—å
    —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –≥—Ä—É–ø—ñ —è–∫–∞ –ø–∏—à–µ
    """
    return group, group_user_writer, all_user_us, all_user_their



#============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def write_group_message_text(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_data(message, state)
    text = message.text
    data = None

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(*map(send_notification(1, text, data, groups), all_user_us_ids))
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(*map(send_notification(2, text, data, groups), all_user_us_id))
            await asyncio.gather(*map(send_notification(3, text, data, groups), all_user_their_id))

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

        elif bool(len(all_user_their)) == False:
            await message.answer(f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=kb_client)
    await state.finish()

#============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def write_group_message_photo(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_data(message, state)
    text = None
    photo = message.photo[0].file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(*map(send_notification(4, text, photo, groups), all_user_us_ids))
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(*map(send_notification(5, text, photo, groups), all_user_us_id))
            await asyncio.gather(*map(send_notification(6, text, photo, groups), all_user_their_id))

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

        elif bool(len(all_user_their)) == False:
            await message.answer(f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=kb_client)
    await state.finish()

#============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è —Å—Ç—ñ–∫–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def write_group_message_sticker(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_data(message, state)
    text = None
    sticker = message.sticker.file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(*map(send_notification(7, text, sticker, groups), all_user_us_ids))
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(*map(send_notification(8, text, sticker, groups), all_user_us_id))
            await asyncio.gather(*map(send_notification(9, text, sticker, groups), all_user_their_id))

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

        elif bool(len(all_user_their)) == False:
            await message.answer(f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=kb_client)
    await state.finish()

#============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def write_group_message_video(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_data(message, state)
    text = None
    video = message.video.file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(*map(send_notification(10, text, video, groups), all_user_us_ids))
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(*map(send_notification(11, text, video, groups), all_user_us_id))
            await asyncio.gather(*map(send_notification(12, text, video, groups), all_user_their_id))

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

        elif bool(len(all_user_their)) == False:
            await message.answer(f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=kb_client)
    await state.finish()

#============= –Ω–∞–¥—Å–ª–∞–Ω–Ω—è gif –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def write_group_message_animation(message: types.Message, state: FSMContext):
    group, group_user_writer, all_user_us, all_user_their = await get_data(message, state)
    text = None
    animation = message.animation.file_id

    if group == group_user_writer:
        all_user_us_ids = map(lambda e: e[0], all_user_us)
        groups = None
        await asyncio.gather(*map(send_notification(13, text, animation, groups), all_user_us_ids))
        await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

    else:
        if bool(len(all_user_their)):
            all_user_us_id = map(lambda e: e[0], all_user_us)
            all_user_their_id = map(lambda e: e[0], all_user_their)
            groups = [group, group_user_writer]

            await asyncio.gather(*map(send_notification(14, text, animation, groups), all_user_us_id))
            await asyncio.gather(*map(send_notification(15, text, animation, groups), all_user_their_id))

            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

        elif bool(len(all_user_their)) == False:
            await message.answer(f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=kb_client)
    await state.finish()

def send_notification(what_send: int, text: str, file_id: str, groups: list):
    async def wrapped(user_id: int):
        try:
            try:
                # TEXT
                if what_send == 1:
                    await bot.send_message(user_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ :\n" + text)
                elif what_send == 2:
                    await bot.send_message(user_id, f"–ú–∏ –¥–æ {groups[0]} :\n" + text)
                elif what_send == 3:
                    await bot.send_message(user_id, f"{groups[1]} –ø–∏—à–µ :\n" + text)

                # PHOTO
                elif what_send == 4:
                    await bot.send_photo(user_id, file_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏.")
                elif what_send == 5:
                    await bot.send_photo(user_id, file_id, f"–ú–∏ –¥–æ {groups[0]} :")
                elif what_send == 6:
                    await bot.send_photo(user_id, file_id, f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :")

                # SRICKER
                elif what_send == 7:
                    await bot.send_message(user_id, file_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏.")
                    await bot.send_sticker(user_id, file_id)
                elif what_send == 8:
                    await bot.send_message(user_id, f"–ú–∏ –¥–æ {groups[0]} :")
                    await bot.send_sticker(user_id, file_id)
                elif what_send == 9:
                    await bot.send_message(user_id, f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :")
                    await bot.send_sticker(user_id, file_id)

                # VIDEO
                elif what_send == 10:
                    await bot.send_message(user_id, file_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏.")
                    await bot.send_video(user_id, file_id)
                elif what_send == 11:
                    await bot.send_message(user_id, f"–ú–∏ –¥–æ {groups[0]} :")
                    await bot.send_video(user_id, file_id)
                elif what_send == 12:
                    await bot.send_message(user_id, f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :")
                    await bot.send_video(user_id, file_id)

                # ANIMATION
                elif what_send == 13:
                    await bot.send_message(user_id, f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏.")
                    await bot.send_animation(user_id, file_id)
                elif what_send == 14:
                    await bot.send_message(user_id, f"–ú–∏ –¥–æ {groups[0]} :")
                    await bot.send_animation(user_id, file_id)
                elif what_send == 15:
                    await bot.send_message(user_id, f"{groups[1]} –Ω–∞–¥—Å–∏–ª–∞—î :")
                    await bot.send_animation(user_id, file_id)
            except RetryAfter as ra:
                await asyncio.sleep(ra.timeout)
        except:
            pass
    
    return wrapped


#================= –í–Ü–î–ú–Ü–ù–ê –î–Ü–á –∞–±–æ –ü–û–í–ï–†–ù–ï–ù–ù–Ø –ù–ê–ó–ê–î
async def back_write_group(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.delete()
    await query.message.answer("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

async def back_write_group_message(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.edit_text(
        "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ\n—Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —ó—ó —ñ–º'—è –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup = await inline_kb_group())
    await FSMWrite.group.set()
#==============================


# ===========================–§–æ—Ç–æ –∫–æ—Ç–∞ üñº============================
async def choose_random_photo():
    folder_path = 'E:\KOTEKBOT\photo'
    file_list = os.listdir(folder_path)
    random_file = random.choice(file_list)
    file_path = os.path.join(folder_path, random_file)
    return file_path

async def send_random_cat_photo(message: types.Message):
    await stats_schedule_add("–§–æ—Ç–æ –∫–æ—Ç–∞ üñº", 1)
    photo_path = await choose_random_photo()
    with open(photo_path, 'rb') as photo:
        await message.answer_photo(photo)


async def register_handler_stats(dp: Dispatcher):
    dp.register_callback_query_handler(text_save, text = "edit_text", state=None)
    dp.register_callback_query_handler(cancel, text = "cancel", state=FSMWrite.text)
    dp.register_message_handler(text_save1, state=FSMWrite.text)
    dp.register_message_handler(see_text, commands=["text"])
    dp.register_message_handler(send_random_cat_photo, text = "–§–æ—Ç–æ –∫–æ—Ç–∞ üñº")
    dp.register_message_handler(see_text, Text(ignore_case=True, equals="–ó–∞–º—ñ—Ç–∫–∏ üìù"))
    dp.register_message_handler(write, Text(ignore_case=True, equals="–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è"), state=None)

    # C–∫–∞—Å—É–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏
    dp.register_callback_query_handler(back_write_group, text = "–ù–∞–∑–∞–¥", state=FSMWrite.group)
    # –í–∏–±—Ä–∞–≤ –≥—Ä—É–ø—É
    for text in await get_list():
        dp.register_callback_query_handler(write_group, lambda c, t=text: c.data == t, state=FSMWrite.group)

    # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏
    dp.register_callback_query_handler(back_write_group_message, text = "—ñ–Ω—à–∞", state=FSMWrite.message_group) 
    # –ù–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    dp.register_message_handler(write_group_message_text, content_types=["text"], state=FSMWrite.message_group)
    dp.register_message_handler(write_group_message_photo, content_types=["photo"],state=FSMWrite.message_group)
    dp.register_message_handler(write_group_message_sticker, content_types=["sticker"],state=FSMWrite.message_group)
    dp.register_message_handler(write_group_message_video, content_types=["video"],state=FSMWrite.message_group) 
    dp.register_message_handler(write_group_message_animation, content_types=["animation"],state=FSMWrite.message_group) 
