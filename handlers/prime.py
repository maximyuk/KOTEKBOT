from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from data_base import Database
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked
from keyboards import *
from handlers.stats import stats_schedule_add
from create_bot import bot


# =========–ö–ª–∞—Å—Å –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É=========
class FSMWrite(StatesGroup):
    group = State()
    message = State()


async def text_save(message: types.Message):
    db = await Database.setup()
    await stats_schedule_add("–î–æ–¥–∞—Ç–∏ –∑–∞–º—ñ—Ç–∫—É üìù", 1)
    if await db.user_exists_sql(message.from_user.id):
        if len(message.text[7::]) < 2:
            await message.answer("—Ç–µ–∫—Å—Ç –∑–∞–∫–æ—Ä–æ—Ç–∫–∏–π")
        else:
            link = message.text[7::]
            groups = await db.group_for_user_id(message.from_user.id)
            await db.add_text_sql(link, groups)
            await message.answer("–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    elif await db.teachers_exists_sql(message.from_user.id):
        if len(message.text[7::]) < 2:
            await message.answer("—Ç–µ–∫—Å—Ç –∑–∞–∫–æ—Ä–æ—Ç–∫–∏–π")
        else:
            link = message.text[7::]
            groups = await db.see_group_for_teach_id(message.from_user.id)
            await db.add_text_sql(link, groups)
            await message.answer("–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É –≥—Ä—É–ø–∞—Ö")


async def see_text(message: types.Message):
    db = await Database.setup()
    await stats_schedule_add("–ó–∞–º—ñ—Ç–∫–∏ üìù", 1)
    if await db.user_exists_sql(message.from_user.id):
        groups = await db.group_for_user_id(message.from_user.id)
        boolean, text = await db.see_text_sql(groups)
        if boolean:
            await message.answer(
                "–ó–∞–º—ñ—Ç–∫–∏ –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ :\n\n"
                + text
                + "\n\n–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—ñ\n–Ω–∞–ø–∏—à—ñ—Ç—å '–¥–æ–¥–∞—Ç–∏ *–≤–∞—à —Ç–µ–∫—Å—Ç*'"
            )
        elif not boolean:
            await message.answer(
                "–£ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –¥–æ–¥–∞–Ω–æ –Ω—ñ—è–∫–æ–≥–æ —Ç–µ—Å—Ç—É\n–©–æ–± —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å \n'–¥–æ–¥–∞—Ç–∏ *–≤–∞—à —Ç–µ–∫—Å—Ç*'"
            )
    elif await db.teachers_exists_sql(message.from_user.id):
        groups = await db.see_group_for_teach_id(message.from_user.id)
        boolean, text = await db.see_text_sql(groups)
        if boolean:
            await message.answer(
                "–í–∞—à—ñ –∑–∞–º—ñ—Ç–∫–∏ :\n\n"
                + text
                + "\n\n–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—ñ\n–Ω–∞–ø–∏—à—ñ—Ç—å '–¥–æ–¥–∞—Ç–∏ *–≤–∞—à —Ç–µ–∫—Å—Ç*'"
            )
        elif not boolean:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ –¥–æ–¥–∞–Ω–æ –Ω—ñ—è–∫–æ–≥–æ —Ç–µ—Å—Ç—É\n–©–æ–± —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å \n'–¥–æ–¥–∞—Ç–∏ *–≤–∞—à —Ç–µ–∫—Å—Ç*'"
            )
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")


async def write(message: types.Message):
    db = await Database.setup()
    await stats_schedule_add("–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è", 1)
    if await db.user_exists_sql(message.from_user.id):
        await message.answer(
            "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ\n—Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —ó—ó —ñ–º'—è –Ω–∏–∂—á–µ ‚¨áÔ∏è",
            reply_markup=await get_kb(),
        )
        await FSMWrite.group.set()


async def write1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    group = await db.group_exists_sql(message.text)
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            "–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–Ω–æ ‚úÖ", reply_markup=kb_client
        )
    else:
        if group:
            async with state.proxy() as data:
                data["group"] = message.text
            await FSMWrite.message.set()
            await message.answer(
                f"–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üìù", reply_markup=types.ReplyKeyboardRemove()
            )
        elif not group:
            await message.answer(
                f"–ù–µ–º–∞—î –≥—Ä—É–ø–∏ {message.text} ‚ùå", reply_markup=kb_client
            )
            await state.finish()


async def write2(message: types.Message, state: FSMContext):
    db = await Database.setup()

    async with state.proxy() as data:
        group = data["group"]
        all_user = await db.all_user_id_for_group_sql(group)
        group_user_writer = await db.group_for_user_id(message.from_user.id)
        if bool(len(all_user)):
            for number in range(0, len(all_user)):
                try:
                    await bot.send_message(
                        all_user[number][0],
                        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {group_user_writer}\n" + message.text,
                    )
                except BotBlocked:
                    await db.delete_users_sql(all_user[number])
                    await bot.send_message(
                        5963046063, f"–í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {all_user[number]}"
                    )
            await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)
        elif bool(len(all_user)) == False:
            await message.answer(
                f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=kb_client
            )
    await state.finish()


def register_handler_stats(dp: Dispatcher):
    dp.register_message_handler(text_save, Text(ignore_case=True, startswith="–î–æ–¥–∞—Ç–∏"))
    dp.register_message_handler(see_text, commands=["text"])
    dp.register_message_handler(see_text, Text(ignore_case=True, equals="–ó–∞–º—ñ—Ç–∫–∏ üìù"))
    dp.register_message_handler(write, Text(ignore_case=True, equals="–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è"))
    dp.register_message_handler(write1, state=FSMWrite.group)
    dp.register_message_handler(write2, state=FSMWrite.message)
