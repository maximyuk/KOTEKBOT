from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from data_base import Database
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from keyboards import *
from handlers.stats import stats_schedule_add
from create_bot import bot


# =========–ö–ª–∞—Å—Å –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É=========
class FSMWrite(StatesGroup):
    text = State()
    group = State()
    teach = State()
    message_group = State()
    message_teach = State()

text_inline = InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–º—ñ—Ç–∫—É", callback_data = "edit_text")
text_inline_kb = InlineKeyboardMarkup(row_width=1).add(text_inline)

cancle_inline = InlineKeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå", callback_data = "cancel")
cancle_inline_kb = InlineKeyboardMarkup(row_width=1).add(cancle_inline)



async def text_save(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("""
–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —è–∫–∏–π –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏—Å—è
—É –∑–∞–º—ñ—Ç–∫–∞—Ö –≤–∞—à–æ—ó –≥—Ä—É–ø–∏

–ù–∞–ø—Ä–∏–∫–ª–∞–¥ :
–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫: –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç

–ß–µ—Ä–≥—É–≤–∞–Ω–Ω—è : –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç

–í–∏ –∂ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—É–¥—å-—â–æ —Ü–µ –ª–∏—à–µ –ø—Ä–∏–∫–ª–∞–¥.""", reply_markup=cancle_inline_kb)
    await FSMWrite.text.set()
    

async def cancel(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ‚úÖ", reply_markup=text_inline_kb)
    await state.finish()


async def text_save1(message: types.Message, state: FSMContext):
    db = await Database.setup()
    await stats_schedule_add("–î–æ–¥–∞—Ç–∏ –∑–∞–º—ñ—Ç–∫—É üìù", 1)

    if await db.user_exists_sql(message.from_user.id):
        if len(message.text) <= 1:
            await message.answer("–¢–µ–∫—Å—Ç –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑", reply_markup=text_inline_kb)
            await state.finish()
        else:
            text = message.text
            groups = await db.group_for_user_id(message.from_user.id)
            await db.add_text_sql(text, groups)
            await message.answer("–ó–∞–º—ñ—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=text_inline_kb)
            await state.finish()
    elif await db.teachers_exists_sql(message.from_user.id):
        if len(message.text) <= 1:
            await message.answer("–¢–µ–∫—Å—Ç –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑", reply_markup=text_inline_kb)
            await state.finish()
        else:
            text = message.text
            groups = await db.see_group_for_teach_id(message.from_user.id)
            await db.add_text_sql(text, groups)
            await message.answer("–ó–∞–º—ñ—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=text_inline_kb)
            await state.finish()
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É –≥—Ä—É–ø–∞—Ö")
        await state.finish()


async def see_text(message: types.Message):
    db = await Database.setup()
    await stats_schedule_add("–ó–∞–º—ñ—Ç–∫–∏ üìù", 1)
    if await db.user_exists_sql(message.from_user.id):
        groups = await db.group_for_user_id(message.from_user.id)
        boolean, text = await db.see_text_sql(groups)
        if boolean:
            await message.answer(
                "–ó–∞–º—ñ—Ç–∫–∏ –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ :\n\n"
                + text
                + "\n\n–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—ñ\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", reply_markup=text_inline_kb
            )
        elif not boolean:
            await message.answer(
                "–£ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ –Ω–µ –¥–æ–¥–∞–Ω–æ –Ω—ñ—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É\n–©–æ–± —Ü–µ –∑—Ä–æ–±–∏—Ç–∏\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", 
                reply_markup=text_inline_kb
            )
    elif await db.teachers_exists_sql(message.from_user.id):
        groups = await db.see_group_for_teach_id(message.from_user.id)
        boolean, text = await db.see_text_sql(groups)
        if boolean:
            await message.answer(
                "–í–∞—à—ñ –∑–∞–º—ñ—Ç–∫–∏ :\n\n"
                + text
                + "\n\n–©–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—ñ\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
                reply_markup=text_inline_kb
            )
        elif not boolean:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ –¥–æ–¥–∞–Ω–æ –Ω—ñ—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É\n–©–æ–± —Ü–µ –∑—Ä–æ–±–∏—Ç–∏\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ", 
                reply_markup=text_inline_kb
            )
    else:
        await message.answer("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")


async def write(message: types.Message):
    db = await Database.setup()
    await stats_schedule_add("–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è", 1)
    await message.delete()
    if await db.user_exists_sql(message.from_user.id):
        msg = await message.answer("–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏", reply_markup=types.ReplyKeyboardRemove())
        await msg.delete()
        await message.answer(
            "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ\n—Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —ó—ó —ñ–º'—è –Ω–∏–∂—á–µ ‚¨áÔ∏è",
            reply_markup = await inline_kb_group(),
        )
        await FSMWrite.group.set()
    elif await db.teachers_exists_sql(message.from_user.id):
        await message.answer(
            "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à—ñ–π –≥—Ä—É–ø—ñ\n—Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —ó—ó —ñ–º'—è –Ω–∏–∂—á–µ ‚¨áÔ∏è",
            reply_markup = await get_t_kb(),
        )
        await FSMWrite.teach.set()


async def write_group(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    if query.data == "–ù–∞–∑–∞–¥":
        await state.finish()
        await query.message.delete_reply_markup()
        msg = await query.message.edit_text("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–Ω–æ ‚úÖ")
        await msg.delete()
        await query.message.answer("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)

    else:
        group = await db.group_exists_sql(query.data)
        if group:
            await FSMWrite.message_group.set()
            await query.message.delete_reply_markup()
            msg = await query.message.edit_text(f"–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üìù")
            async with state.proxy() as data:
                data["group"] = query.data
                data["msg_id"] = msg.message_id
                data["chat_id"] = msg.chat.id


async def write_teach(message: types.Message, state: FSMContext):
    db = await Database.setup()
    teach = await db.teacher_name_exists_sql(message.text)
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            "–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–Ω–æ ‚úÖ", reply_markup=kb_client
        )
    else:
        if teach:
            async with state.proxy() as data:
                data["group"] = message.text
            await FSMWrite.message_teach.set()
            await message.answer(
                f"–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üìù", reply_markup=types.ReplyKeyboardRemove()
            )
        elif not teach:
            await message.answer(
                f"–ù–µ–º–∞—î –≤–∏–∫–ª–∞–¥–∞—á–∞ {message.text} ‚ùå", reply_markup=kb_client
            )
            await state.finish()



async def write_group_message(message: types.Message, state: FSMContext):
    db = await Database.setup()

    async with state.proxy() as data:
        group = data["group"]
        msg_id = data["msg_id"]
        chat_id = data["chat_id"]
        all_user_their = await db.all_user_id_for_group_sql(group)
        group_user_writer = await db.group_for_user_id(message.from_user.id)
        all_user_us = await db.all_user_id_for_group_sql(group_user_writer)
        await bot.delete_message(chat_id, msg_id)
        await message.delete()
        if group == group_user_writer:
            for number in range(0, len(all_user_us)):
                    try:
                        await bot.send_message(
                            all_user_us[number][0],
                            f"–í—ñ–¥ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ :\n" + message.text,
                        )
                    except:
                        pass
            await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)
        else:
            if bool(len(all_user_their)):
                await bot.send_message(5963046063, f"{message.from_user.id} {group_user_writer} –Ω–∞–¥—ñ—Å–ª–∞–≤ –¥–æ {group}:\n{message.text}\n ")
                for number in range(0, len(all_user_us)):
                    try:
                        await bot.send_message(
                            all_user_us[number][0],
                            f"–ú–∏ –¥–æ {group} :\n" + message.text,
                        )
                    except:
                        pass
                for number in range(0, len(all_user_their)):
                    try:
                        await bot.send_message(
                            all_user_their[number][0],
                            f"{group_user_writer} –ø–∏—à–µ :\n" + message.text,
                        )
                    except:
                        pass
                await message.answer("–ù–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)
            elif bool(len(all_user_their)) == False:
                await message.answer(
                    f"–ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ {group} ‚ùå", reply_markup=kb_client
                )
    await state.finish()

async def write_teach_message(message: types.Message, state: FSMContext):
    db = await Database.setup()

    async with state.proxy() as data:
        group = data["group"]
        all_user = await db.all_teach_id_for_group_sql(group)
        group_user_writer = await db.group_for_teach_id(message.from_user.id)
        if bool(len(all_user)):
            for number in range(0, len(all_user)):
                try:
                    await bot.send_message(
                        all_user[number][0],
                        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {group_user_writer}\n" + message.text,
                    )
                except BotBlocked:
                    await db.delete_users_sql(all_user[number])
                    await bot.send_message(
                        5963046063, f"–í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {all_user[number]}"
                    )
            await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ ‚úÖ", reply_markup=kb_client)
        elif bool(len(all_user)) == False:
            await message.answer(
                f"–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑–∞ —Ü–∏–º —ñ–º'—è–º {group} ‚ùå", reply_markup=kb_client
            )
    await state.finish()


async def get_list():
    db = await Database.setup()
    list = await db.group_list_sql()
    return list

async def register_handler_stats(dp: Dispatcher):
    button_list = await get_list()
    dp.register_callback_query_handler(text_save, text = "edit_text", state=None)
    dp.register_callback_query_handler(cancel, text = "cancel", state=FSMWrite.text)
    dp.register_message_handler(text_save1, state=FSMWrite.text)
    dp.register_message_handler(see_text, commands=["text"])
    dp.register_message_handler(see_text, Text(ignore_case=True, equals="–ó–∞–º—ñ—Ç–∫–∏ üìù"))
    dp.register_message_handler(write, Text(ignore_case=True, equals="–ù–∞–ø–∏—Å–∞—Ç–∏ ‚úâÔ∏è"), state=None)
    for text in button_list:
        dp.register_callback_query_handler(write_group, lambda c, t=text: c.data == t, state=FSMWrite.group)
    dp.register_callback_query_handler(write_group, text = "–ù–∞–∑–∞–¥", state=FSMWrite.group)
    dp.register_message_handler(write_teach, state=FSMWrite.teach)
    dp.register_message_handler(write_group_message, state=FSMWrite.message_group)
    dp.register_message_handler(write_teach_message, state=FSMWrite.message_teach)
